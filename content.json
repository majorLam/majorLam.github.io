{"meta":{"title":"胡为me来哉","subtitle":"","description":"","author":"Major Lam","url":"http://example.com","root":"/"},"pages":[{"title":"","date":"2023-08-09T11:03:41.006Z","updated":"2023-08-09T11:03:41.006Z","comments":true,"path":"Front-matter/Front-matter.html","permalink":"http://example.com/Front-matter/Front-matter.html","excerpt":"","text":"1234567# 加密title: Hello World! date: 2020-09-27 10:42:38 tags: - World - Hello password: hello"},{"title":"tags","date":"2019-05-03T04:03:35.000Z","updated":"2023-08-09T10:21:40.804Z","comments":true,"path":"friends/index.html","permalink":"http://example.com/friends/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-05-03T04:03:35.000Z","updated":"2023-08-09T10:23:40.686Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-05-03T04:03:35.000Z","updated":"2023-08-09T10:22:35.908Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-05-03T04:03:35.000Z","updated":"2023-08-09T10:22:32.190Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"数据库分析与涉及 选择","slug":"数据库分析与涉及-选择","date":"2023-08-12T09:24:37.000Z","updated":"2023-08-12T09:27:33.788Z","comments":true,"path":"2023/08/12/数据库分析与涉及-选择/","link":"","permalink":"http://example.com/2023/08/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E6%9E%90%E4%B8%8E%E6%B6%89%E5%8F%8A-%E9%80%89%E6%8B%A9/","excerpt":"","text":"# 数据库分析与涉及 事务规范包括了 事务名称、事务描述、事务所访问的数据项、事务用户。 事务规范可以用来表示数据库应用系统的数据处理需求。 ** 数据库应用系统的实施工作** 包括: 创建数据库、装载数据、编写与调试应用程序、数据库试运行 数据库应用系统 (DBAS)实现与部署内容包括: ①建立数据库结构；②数据加载；③事务和应用程序的编码及测试；④系统集成、测试与试运行；⑤系统部署。 从功能角度 数据库应用系统可以划分为四个层次来实现： ①表示层：用于显示数据和接收用户输入的数据。（一般为 Windows 应用程序或 Web 应用程序)。 ②业务逻辑层：是表示层和数据访问层之间的桥梁，主要负责数据的传递和处理。 ③数据访问层：负责与 DBMS 系统进行交互，提取或存入应用系统所需的数据。 ④数据持久层：负责保存和管理应用系统数据。（根据事务–基本表交叉引用矩阵来调整数据文件的组织结构）。 索引使用的原则： 1、经常在查询中作为条件被使用的列； 2、频繁进行排序 group by或分组 order by操作的列； 3、一个列的值域很大；@如果待排序的列有多个，应在这些列上建立复合索引。 对于关系模式进行去规范化处理，这属于数据库结构涉及中的物理结构设计。 解析：通过数据库概念设计和逻辑设计已经得到了规范化的关系模式。尽管关系数据库模式是按照关系数据库管理系统支持的结构进行数据的描述和组织的，然而，这些符号表示并不能解释如何处理和存储数据。数据库物理设计的目的是将数据的逻辑描述转换为实现技术规范，其目标是设计数据存储方案，以便提供足够好的性能并确保数据库数据的完整性、安全性和可恢复性。 事务概要设计内容包括： 事务名称、事务所访问的关系表及关系属性、事务处理逻辑、事务用户（指使用、启动、调用该事务的软件模块或系统）。 降低事务隔离级别可以: 提高事务的吞吐量， 提高活锁的可能性， 降低发生死锁、发生阻塞的可能性。 分区表涉及到数据库的物理结构。 解析：为改善对这类大数据量基本表的访问性能，可将基本表划分为若干分区，各分区数据分别存储在不同位置的磁盘上，并可采用不同的物理组织方式。分区表是从物理上将一个大表分成几个小表，但从逻辑上来看还是一个大表。 合并表属于数据库的物理结构调整。 完整性约束按照其约束条件的作用对象可以划分为不同级别。 已知关系表：职工 (职工号，职工名，经理职工号，工资)，如果要求职工的工资不能高于其经理的工资，则这个约束的完整性级别属于关系级完整性约束。 完整性约束条件的作用对象分为列、元组和关系三种级别，其中对列的约束主要指对其值类型、范围、精度、排序等的约束条件。对元组的约束主要指对记录中各个属性之间的联系的约束条件。对关系的约束是指对若干纪录间、关系集合上以及关系之间联系的约束条件。 已知关系 R (A, B, C)，其主码是属性 A。下列 SQL 语句中定义了一个唯一辅索引的是 create unique index idx2 on R (A)。 解析：在数据文件的非主属性上建立的索引称为辅索引。 IDEFO 图：上控下机左入右出。（控制，机制，输入，输出） 左边的输入箭头表示完成活动需要的数据； 矩形框上方的控制箭头描述了影响这个活动执行的事件或约束条件； 右边的输出箭头说明由活动产生的结果及信息； 下方进入的机制箭头表示实施该活动的物理手段或完成活动需要的资源。 在进行 DBAS 设计时，为了避免死锁，可以考虑以下原则： （1）按同一顺序访问资源。 （2）避免事务中的用户交互。 （3）采用小事务模式，尽量缩短事务的长度，减少占有锁的时间。 （4）尽量使用记录级别的锁（行锁），少用表级别的锁。 （5）使用绑定连接，使同一应用程序所打开的两个或多个连接可以相互合作。 数据库应用系统的 **业务逻辑层主要负责构件的设计 **。 1、一个构件或模块只负责完成一项任务，也就是单一责任原则。 2、各个构件均应具有独立的功能，并最大限度地减少与其他构件功能重叠。 3、构件之间的接口应尽量简单明确。 4、如果两个构件间的关系比较复杂，应考虑进一步进行模块划分。 5、如果构件过于复杂，可以考虑将其细分。 提高数据的隔离性级别可以降低发生活锁的可能性。 事务的隔离性是指多个并发事务同时访问一个数据库时，一个事物不应被另一个事物所干扰，即保证并发读取数据的正确性，降低发生数据不一致的可能性。 ❗❗❗未完待续。。。","categories":[{"name":"备考","slug":"备考","permalink":"http://example.com/categories/%E5%A4%87%E8%80%83/"}],"tags":[{"name":"NCRE 数据库","slug":"NCRE-数据库","permalink":"http://example.com/tags/NCRE-%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"Hello World","slug":"hello-world","date":"2023-08-09T07:57:59.639Z","updated":"2023-08-09T12:51:56.502Z","comments":true,"path":"2023/08/09/hello-world/","link":"","permalink":"http://example.com/2023/08/09/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. # Quick Start # Create a new post 1$ hexo new &quot;My New Post&quot; More info: Writing # Run server 1$ hexo server More info: Server # Generate static files 1$ hexo generate More info: Generating # Deploy to remote sites 1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"这一篇测试文章","slug":"这一篇测试文章","date":"2023-08-08T03:04:13.000Z","updated":"2023-08-09T07:57:59.666Z","comments":true,"path":"2023/08/08/这一篇测试文章/","link":"","permalink":"http://example.com/2023/08/08/%E8%BF%99%E4%B8%80%E7%AF%87%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/","excerpt":"","text":"555 # SELECT E.EMPLOYEE_ID, E.DEPARTMENT_ID FROM EMPLOYEES E, DEPARTMENTS D WHERE E.“DEPARTMENT_ID”=D.“DEPARTMENT_ID”; desc EMPLOYEES； SELECT * FROM EMPLOYEES; SELECT * FROM DEPARTMENTS; SELECT *FROM EMPLOYEES; – SQL92 右外连接 ------------------------------------ SELECT EMPLOYEE_ID, DEPARTMENT_NAME FROM EMPLOYEES E, DEPARTMENTS D WHERE E.“DEPARTMENT_ID”(+)=D.“DEPARTMENT_ID”; – --SQL99 左外连接 ------------------------------------ SELECT EMPLOYEE_ID,DEPARTMENT_NAME from EMPLOYEES e left outer join DEPARTMENTS d on e.DEPARTMENT_ID=d.DEPARTMENT_ID; # PL/SQL procedural language SQL 过程化 SQL # 函数 # decode 函数 123456789101112131415161718decode (条件， 值1，返回值1， 值2，返回值2， ...... 值n,返回值n， 缺省值);该函数的含义如下：IF 条件=值1 THEN RETURN(翻译值1)ELSIF 条件=值2 THEN RETURN(翻译值2) ......ELSIF 条件=值n THEN RETURN(翻译值n)ELSE RETURN(缺省值)END IF decode (条件，值 1, 返回值 1, 值 2, 返回值 2,… 值 n, 返回值 n, 缺省值) 12select decode(100,1,2,3)--100不等于1，2，3，结果返回3 decode (字段或字段的运算，值 1，值 2，值 3） 这个函数运行的结果是，当字段或字段的运算的值等于值 1 时，该函数返回值 2，否则返回值 3 当然值 1，值 2，值 3 也可以是表达式，这个函数使得某些 sql 语句简单了许多 使用方法： 1、比较大小 12select decode(sign(变量1-变量2),-1,变量1,变量2) from dual;--取最小值select decode (sign(10-20),-1,10,20) from dual; sign () 函数根据某个值是 0、正数还是负数，分别返回 0、1、-1 例如： 变量 1=10，变量 2=20 则 sign (变量 1 - 变量 2) 返回 - 1，decode 解码结果为 “变量 1”，达到了取较小值的目的。 2、此函数用在 SQL 语句中，功能介绍如下： Decode 函数与一系列嵌套的 IF-THEN-ELSE 语句相似。base_exp 与 compare1,compare2 等等依次进行比较。如果 base_exp 和 第 i 个 compare 项匹配，就返回第 i 个对应的 value 。如果 base_exp 与任何的 compare 值都不匹配，则返回 default。每个 compare 值顺次求值，如果发现一个匹配，则剩下的 compare 值（如果还有的话）就都不再求值。一个为 NULL 的 base_exp 被认为和 NULL compare 值等价。如果需要的话，每一个 compare 值都被转换成和第一个 compare 值相同的数据类型，这个数据类型也是返回值的类型。 Decode 函数在实际开发中非常的有用 结合 Lpad 函数，如何使主键的值自动加 1 并在前面补 0 select LPAD (decode (count (记录编号),0,1,max (to_number (记录编号)+1)),14,‘0’) 记录编号 from tetdmis eg: select decode(dir,1,0,1) from a1_interval dir 的值是 1 变为 0，是 0 则变为 1 比如我要查询某班男生和女生的数量分别是多少？ 通常我们这么写: select count() from 表 where 性别 ＝ 男； select count() from 表 where 性别 ＝ 女； 要想显示到一起还要 union 一下，太麻烦了 用 decode 呢，只需要一句话 select decode (性别，男，1，0），decode (性别，女，1，0） from 表 3，order by 对字符列进行特定的排序 大家还可以在 Order by 中使用 Decode。 例：表 table_subject，有 subject_name 列。要求按照：语、数、外的顺序进行排序。这时，就可以非常轻松的使用 Decode 完成要求了。 select * from table_subject order by decode (subject_name, ‘语文’, 1, ‘数学’, 2, , ‘外语’,3) # ramn cmd 进入 &quot;rman target/&quot; 归档模式 archive log list; 热备份：数据库依旧在运行 # 指令 1. 创建相同的表与数据（复制表） 1create table 1 as select *from 2; # 案例 # 1. 模拟数据库非正常宕机，实例故障 1 执行shutdown abort指令前 2 查看 alert_$SID.log 会找到 crash recovery 字样，如下所示 Beginning crash recovery of 1 threads parallel recovery started with 3 processes Started redo scan Completed redo scan read 140 KB redo, 53 data blocks need recovery Started redo application at Thread 1: logseq 15, block 5469 Recovery of Online Redo Log: Thread 1 Group 3 Seq 15 Reading mem 0 Mem# 0: D:\\APP\\ORADATA\\ORCL9\\REDO03.LOG Completed redo application of 0.09MB Completed crash recovery at 在数据库当前版本，abort 选项来停止实例， 实例的 smon 后台进程会自己进行修复。 # 2. 归档模式（archive）与非归档模式（noarchive）的转换 123456shutdown immediatestartup mountalter database archivelog;archive log start;alter database open;archive log list; # 3. 归档模式下，在线联机备份表空间， 数据丢失后恢复表空间 ①首先保证为存档模式 ② 1sql&gt;alter tablespace users begin backup; ③将【user1.dbf】文件备份到其他的盘； ④ 1sql&gt;alter tablespace users end backup; ⑤执行一些 DML 操作 使用表空间 users 12create table me(id number);insert into me values(2023); ⑥ 删除 users.dbf 模拟数据丢失，介质故障 如果提示文件被占用， 则执行 shutdown immediate 命令 Linux 环境下可以直接 rm 命令删除 ⑦尝试启动数据库， 会遇到错误提示 ⑧执行 还原操作： 将步骤 2 备份文件手工拷贝回源目录； * 因为表空间和数据文件存在 1-n 对应关系，数据文件序号可以从数据字典 v$datafile 查询 file# ⑨执行 恢复操作： 12SQL &gt; recover datafile &lt;file#&gt;;SQL&gt; alter database open; # 4. 用 RMAN 执行不完全恢复 1 理解不完全恢复： 就是恢复到指定的时间点， 可以是 SCN ，可以是 timestamp 2 用 RMAN 执行一次全备份 backup database plus archivelog; 3 新建一个表 bkp 使用 users 表空间 4 在表 bkp 中插入数据， 并且提交 5 select curent_scn from v$database; — 生产环境中很可能无法时时刻刻记录 scn 6 truncate 表 bkp 7 建立一个新表 test 同样使用 users 表空间 8 在表 test 中插入数据， 提交. 9 记录 archive log list 的 日志序号 — 理解 resetlogs 是什么意思 10 此时执行 RMAN 不完全恢复脚本 ，其中 SCN — 步骤 5 获得 12345678run&#123;shutdown immediatestartup mountset until scn 1456308; restore database;recover database;sql &#x27;alter database open resetlogs&#x27;;&#125; 11 查询表，bkp, test 看看哪些数据被恢复 – 理解不完全恢复的概念 # 具体问题的解决 # 查看当前 oracle 版本: 1select *from v$version; mysql 为 1select version(); # 查看回收站: 1show recyclebin; # 回收站当前状态: 1select value from v$parameter where name =&#x27;recyclebin&#x27;; # 删除 Table 不进入 Recycle 的方法： 1drop table tableName purge; ❗在 sys 用户下删除的表不进入回收站； # serror # ORA-01109：数据库未打开 (未解决) 直接执行这个语句 **alter database open** 即可。 # ORA-01918: 用户 ‘SCOTT’ 不存在 ①找到安装路径下的 scott.sql 文件（路径根据自己安装的情况查找，默认为： 【安装盘 /oracle\\WINDOWS.X64_193000_db_home\\rdbms\\admin\\scott.sql】） 1A:\\SoftwareProgram\\oracle\\WINDOWS.X64_193000_db_home\\rdbms\\admin\\scott.sql ②运行 1sql&gt;@A:\\SoftwareProgram\\oracle\\WINDOWS.X64_193000_db_home\\rdbms\\admin\\scott.sql ③解锁 Scott 用户 1alter user scott account unlock; ④设置 Scott 用户密码为 tiger 1alter user scott identified by tiger;","categories":[{"name":"Oracle","slug":"Oracle","permalink":"http://example.com/categories/Oracle/"}],"tags":[{"name":"文章内容标签","slug":"文章内容标签","permalink":"http://example.com/tags/%E6%96%87%E7%AB%A0%E5%86%85%E5%AE%B9%E6%A0%87%E7%AD%BE/"}]}],"categories":[{"name":"备考","slug":"备考","permalink":"http://example.com/categories/%E5%A4%87%E8%80%83/"},{"name":"Oracle","slug":"Oracle","permalink":"http://example.com/categories/Oracle/"}],"tags":[{"name":"NCRE 数据库","slug":"NCRE-数据库","permalink":"http://example.com/tags/NCRE-%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"文章内容标签","slug":"文章内容标签","permalink":"http://example.com/tags/%E6%96%87%E7%AB%A0%E5%86%85%E5%AE%B9%E6%A0%87%E7%AD%BE/"}]}